<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>https-encryption-strategy</title>
    <url>/2020/06/09/https-encryption-strategy/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Java 线程池</title>
    <url>/2020/06/05/java-thread-pool/</url>
    <content><![CDATA[<h3 id="1-线程池"><a href="#1-线程池" class="headerlink" title="1. 线程池"></a>1. 线程池</h3><p>线程池就是一个池子容器，用于存储我们创建的线程，方便管理和复用线程。</p>
<p>线程池适用场景是：1.任务执行时间短 2. 任务数量大，执行频繁 的情况</p>
<p>相对于直接创建线程，它具有以下优势：</p>
<ol>
<li>减少线程的创建于销毁带来的开销<ol>
<li>减少时间成本开销，提高响应速度</li>
<li>减少系统资源开销，避免过度消耗资源，过早耗尽资源</li>
</ol>
</li>
<li>把线程统一放在池子里，方便管理和监控</li>
<li>线程的创建和任务的提交是分开进行的，解耦合，提高了扩展性，可以自由定义一些功能，比如定时、延时、周期等</li>
</ol>
<p>了解了使用线程池的场景和优势，下面我们看一下线程池的使用</p>
<a id="more"></a>

<h3 id="2-线程池的使用"><a href="#2-线程池的使用" class="headerlink" title="2. 线程池的使用"></a>2. 线程池的使用</h3><p>线程池相关的类在JDK提供的JUC中，不论是通过 Executors 还是自定义 ThreadPoolExecutor 创建，实际上都是围绕下图中的类展开的。</p>
<p><img src="http://coderfan.codeagles.com/java-executor.png" alt="Executor"></p>
<ul>
<li>Executor 类提供了任务执行的 execute(runnable) 抽象方法</li>
<li>ExecutorService 在 Executor 基础上新增了线程管理相关函数，同时也是通过 ThreadPoolExecutor 实现的对象实例</li>
<li>ThreadPoolExecutor 是使用线程池的关键类，我们可以通过它配置所需参数，下面会进行详细讲解。</li>
</ul>
<p>了解了类的继承关系，我们来看一下使用 Executor 所需要掌握的知识点，如思维导图所示：</p>
<p><img src="http://coderfan.codeagles.com/java-thread-pool-basic.png" alt="java 线程池的使用"></p>
<h4 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h4><p>线程池的创建有两种方式，Executors 创建和自定义 ThreadPoolExecutor,而 Executors所提供的默认实现实际也是对创建 ThreadPoolExecutor的封装，所以我们直接来看如何直接创建线程池</p>
<h5 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h5><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs jav">public ThreadPoolExecutor(int corePoolSize,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs jav">                              int maximumPoolSize,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs jav">                              long keepAliveTime,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs jav">                              TimeUnit unit,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs jav">                              BlockingQueue&lt;Runnable&gt; workQueue,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs jav">                              ThreadFactory threadFactory,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs jav">                              RejectedExecutionHandler handler) &#123;....&#125;</code></pre></td></tr></table></figure>
<p>ThreadPoolExecutor 构造函数中就是针对线程池的配置</p>
<ul>
<li>corePoolSize，核心线程池数，可以根据自己需要设置，一般根据CPU数进行合理配置，比如 CPU*2</li>
<li>maximumPoolSize，线程池最大线程数</li>
<li>keepAliveTime &amp; unit 线程池工作线程 空闲之后最长等待时间，超时之后要被回收</li>
<li>workQueue，线程池阻塞队列，当线程池核心线程满了，需要把等待线程放入阻塞队列中。阻塞队列是线程安全的，有三种阻塞队列<ul>
<li>直接切换队列，synchronousQueue，该队了每次只允许进入一个任务，该任务被取出以后允许下一个任务入队</li>
<li>有界队列，比如 ArrayBlockingQueue，有界队列意思就是初始化的时候队列容量就已经确定，不可改变</li>
<li>无界队列，比如LinkedBlockingQueue，关于链表阻塞队列网上有说它可以是有界队列也可以是无界队列。但是我个人倾向于认定它就是无界队列。首先无界队列的意思就是没有边界，计算机中到达上限MAX_VALUE。但是如果只是设定MAX_VALUE不能说是无界，更重要的是该队列可以手动扩容的，这是它不同于数组阻塞队列的地方，数组队列一旦设定一个值就不可变了。</li>
</ul>
</li>
<li>ThreadFactory，该方法是可以自行创建线程的工厂抽象类，方便我们在创建线程的同时做一些额外的操作。</li>
<li>handler：RejectedExecutionHandler，任务拒绝策略，当线程池不再接收新任务的时候执行的策略，主要有以下几种策略选择，我们可以根据需要选择策略模式<ul>
<li>AbortPolicy, 该策略直接抛出异常，属于默认策略</li>
<li>CallerRunsPolicy，在调用者所在线程执行任务</li>
<li>DiscardOldestPolicy，直接丢弃队列头部的最旧的任务</li>
<li>DiscardPolicy，直接丢弃该任务</li>
</ul>
</li>
</ul>
<h5 id="Executors-newXXXThreadPool"><a href="#Executors-newXXXThreadPool" class="headerlink" title="Executors.newXXXThreadPool"></a>Executors.newXXXThreadPool</h5><p>了解了 ThreadPoolExecutor 的构造函数，我们可以根据 Executors 提供的newXXXThreadPool()系列方法来了解 ExecutorService 的创建</p>
<p>Executors 一共提供了 5 种线程池<br><img src="http://coderfan.codeagles.com/java-thread-pool-categories.png" alt="常用线程池"></p>
<h6 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool()"></a>newCachedThreadPool()</h6><p>这种线程池 corePoolSize =0，maximumPoolSize = MAX_VALUE， 也就是说它没有核心线程，全都是工作线程，线程空闲时间是 60s，也就是说如果没有空闲线程就创建新线程执行任务，如果有空闲线程，超过60s就进行回收。这种线程使用的阻塞队列就是第一种直接切换队列</p>
<h6 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool()"></a>newFixedThreadPool()</h6><p>这种 线程池 corePoolSize 和 maximumPoolSize 都是固定的，可以在创建的时候指定，这也就意味着没有工作线程，新任务要么交给核心线程执行，要么在阻塞队列进行等待，或者直接被拒绝。没有工作线程自然空闲等待时间设置0即可，它使用的是无界队列 LinkedBlockingQueue</p>
<h6 id="newSingleThreadPool"><a href="#newSingleThreadPool" class="headerlink" title="newSingleThreadPool()"></a>newSingleThreadPool()</h6><p>newSingleThreadPool相当于newFixedThreadPool的极端，它只允许一个核心线程，没有工作线程，空闲等待时间为0，使用无界队列</p>
<h6 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool()"></a>newScheduledThreadPool()</h6><p>newScheduledThreadPool 创建需要借助 ThreadPoolExecutor 的子类 ScheduledThreadPoolExecutor，它的核心线程数也是需要指定，工作线程数是MAX_VALUE，工作线程空闲等待时长10ms，另外它所用队列是 DelayedWorkQueue，这个队列我还没研究，不多介绍了。</p>
<h4 id="2-2-执行"><a href="#2-2-执行" class="headerlink" title="2.2 执行"></a>2.2 执行</h4><p>执行线程池有一个唯一的方法，就是 Executor.execute(runnable),线程池的任务管理、线程管理、状态维护都从这里开始。在后面会详细介绍</p>
<h4 id="2-3-关闭"><a href="#2-3-关闭" class="headerlink" title="2.3 关闭"></a>2.3 关闭</h4><p>ExecutorService提供了两种关闭线程池的方法，shutdown() 和 shuatdownNow(),他们都能关闭线程池，但是是有区别的</p>
<ul>
<li>调用shutdown()，阻塞队列不再接收新的任务，但是会继续执行正在进行和阻塞队列中缓存的任务</li>
<li>调用 shuatdownNow()，不仅不再接收新任务，也会立即终止所有正在执行的任务，队列中的任务也不再执行。</li>
</ul>
<h4 id="2-4-监控"><a href="#2-4-监控" class="headerlink" title="2.4 监控"></a>2.4 监控</h4><p>线程池还提供了一系列监控方法，都在思维导图中有说明，比较简单，这里不再赘述。</p>
<h3 id="3-ThreadPoolExecutor"><a href="#3-ThreadPoolExecutor" class="headerlink" title="3. ThreadPoolExecutor"></a>3. ThreadPoolExecutor</h3><p>看完了线程池的使用，我们来看一下 ThreadPoolExecutor，线程池设计比较好的地方就是对任务和线程进行了解耦，因此 ThreadPoolExecutor也可以分为三部分来看，任务管理、线程管理、线程池状态维护,如图所示</p>
<p><img src="http://coderfan.codeagles.com/java-thread-pool-executor.png" alt="ThreadPoolExecutor"></p>
<h4 id="3-1-状态维护"><a href="#3-1-状态维护" class="headerlink" title="3.1 状态维护"></a>3.1 状态维护</h4><p>线程池通过 runstate（运行状态） 和 workerCount（线程数量）来记录线程池状态，但是为了方便管理，使用32位二进制数字进行记录，其中高三位用于记录runState，低29位用来记录workerCount</p>
<p>线程状态一共有五种：RUNNING、SHUTDOWN、STOP、TIDYING、TERMINATED</p>
<p>他们执行流程我从参考文献借一张图来展示</p>
<p><img src="http://coderfan.codeagles.com/java-thread-pool-state.png" alt="runState"></p>
<ul>
<li>任务的执行都是在 RUNNING 状态下执行的</li>
<li>当调用shutdown()，会进入SHUTDOWN 状态，当阻塞队列为空，工作线程为0，进入下一状态</li>
<li>调用 shutdownNow()，进入STOP状态，当工作线程为0 进入下一状态</li>
<li>SHUTDOWN 和 STOP 结束后都会进入 TIDYING 状态，此时有效线程数为0</li>
<li>最后状态是TERMINATED，此时所有任务都已经结束，也可以通过调用terminated()方法进入该状态</li>
</ul>
<h4 id="3-2-任务管理"><a href="#3-2-任务管理" class="headerlink" title="3.2 任务管理"></a>3.2 任务管理</h4><h5 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h5><p>任务调度 execute(runable)是线程池的主要入口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (command == <span class="hljs-keyword">null</span>)</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">   </code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> c = ctl.get();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-keyword">true</span>))</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        c = ctl.get();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> recheck = ctl.get();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            reject(command);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            addWorker(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-keyword">false</span>))</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        reject(command);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>大致执行流程是：</p>
<ol>
<li>检查状态，判断是否是正在运行状态，如果是继续提交新任务,否则执行拒绝策略</li>
<li>检查核心线程数<ol>
<li>workerCount &lt; corePoolSize, 新建一个核心线程执行任务</li>
<li>workerCount &gt;= corePoolSize, 执行下一步</li>
</ol>
</li>
<li>检查队列<ol>
<li>队列未满，加入阻塞队列，等待线程提取</li>
<li>队列已满，检查最大线程数，符合corePoolSize &lt;= workerCount &lt; maximumPoolSize，创建工作线程，否则执行拒绝策略</li>
</ol>
</li>
</ol>
<p>在代码中可以看出来，每次要新建线程都会执行addWorker方法，这里先记下来。</p>
<h5 id="任务缓冲"><a href="#任务缓冲" class="headerlink" title="任务缓冲"></a>任务缓冲</h5><p>线程池的核心功能就是管理任务，可以对任务进行缓存。它需要借助BlockingQueue来实现。BlockingQueue相比普通 队列主要多了两个操作：</p>
<ol>
<li>队列为空的时候，线程获取任务需要等待，直到队列非空</li>
<li>队列满的时候，线程需要等待队列可用再提交任务</li>
</ol>
<h5 id="任务申请"><a href="#任务申请" class="headerlink" title="任务申请"></a>任务申请</h5><p>每次提交新任务有两种方式执行：</p>
<ol>
<li>直接创建新线程执行，一般线程初始创建的时候采用该方法。创建线程借助 addWorker方法，我们稍后介绍。</li>
<li>放入缓存队列，等待线程取出后执行。线程执行完成以后会继续从队列取任务，也就实现了线程复用。</li>
</ol>
<h5 id="任务拒绝"><a href="#任务拒绝" class="headerlink" title="任务拒绝"></a>任务拒绝</h5><p>任务拒绝是在线程池拒绝接受新任务的时候执行，一般是核心线程已满、阻塞队列已满、最大线程已满情况下触发。具体可使用策略前面已经说过，不再赘述</p>
<h4 id="3-3-线程管理-Worker"><a href="#3-3-线程管理-Worker" class="headerlink" title="3.3 线程管理-Worker"></a>3.3 线程管理-Worker</h4><p>前面说到线程增加需要用到addWorker().这里我们看一下它的源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-keyword">boolean</span> core)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    retry:</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (;;) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> c = ctl.get();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> rs = runStateOf(c);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">/**</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">         * 1. 检查运行状态,只要不是 RUNNING 状态就直接 return</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">         * 2. 检查队列是否为空、firstTask是否为空</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">         **/</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            ! (rs == SHUTDOWN &amp;&amp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">               firstTask == <span class="hljs-keyword">null</span> &amp;&amp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">               ! workQueue.isEmpty()))</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//检查线程数量</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">for</span> (;;) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">int</span> wc = workerCountOf(c);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">break</span> retry;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            c = ctl.get();  <span class="hljs-comment">// Re-read ctl</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (runStateOf(c) != rs)</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">continue</span> retry;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">// else CAS failed due to workerCount change; retry inner loop</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">boolean</span> workerStarted = <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">boolean</span> workerAdded = <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    Worker w = <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">try</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//下面是新建Worker，Worker中保存线程</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        w = <span class="hljs-keyword">new</span> Worker(firstTask);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> Thread t = w.thread;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (t != <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">//...省略代码...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (workerAdded) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                t.start();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                workerStarted = <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">finally</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (! workerStarted)</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            addWorkerFailed(w);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> workerStarted;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>addWorker中先是进行一系列检查，检查runState、检查线程数量、检查阻塞队列，之后才真正开始创建线程，创建线程就用到了线程管理的核心类WorkerWorker是线程池内的工作线程，实际是一个封装类，它内部维护了一个对应的Thread，方便线程池掌握线程的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> Thread thread;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        Runnable firstTask;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> completedTasks;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        Worker(Runnable firstTask) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            setState(-<span class="hljs-number">1</span>); <span class="hljs-comment">// inhibit interrupts until runWorker</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">this</span>.firstTask = firstTask;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">this</span>.thread = getThreadFactory().newThread(<span class="hljs-keyword">this</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            runWorker(<span class="hljs-keyword">this</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>从 worker的部分代码可以发现，他实现了Runnable类，内部持有Thread的引用。</p>
<ul>
<li>构造函数显示 Thread的引用是通过 getThreadFactory().newThread(this) 实现的ThreadFactory 可以用默认提供的也可以我们自定义实现。</li>
<li>关于firstTask，允许为空。如果创建worker的时候，firstTask不为空，则线程创建后可以直接执行它，也就对应核心线程创建时的情况。如果firstTask为空，则线程创建后去阻塞队列取任务执行，对应的就是非核心线程的创建。</li>
</ul>
<p>然后我们来一下 run()方法的具体实现 runWorker(this)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runWorker</span><span class="hljs-params">(Worker w)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    Thread wt = Thread.currentThread();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    Runnable task = w.firstTask;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    w.firstTask = <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    w.unlock(); <span class="hljs-comment">// allow interrupts</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">boolean</span> completedAbruptly = <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">try</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> (task != <span class="hljs-keyword">null</span> || (task = getTask()) != <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            w.lock();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            </code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                 (Thread.interrupted() &amp;&amp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                !wt.isInterrupted())</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                wt.interrupt();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">try</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                beforeExecute(wt, task);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                Throwable thrown = <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">try</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                    task.run();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                &#125; <span class="hljs-comment">//...异常处理...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125; <span class="hljs-keyword">finally</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                task = <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                w.completedTasks++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                w.unlock();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        completedAbruptly = <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">finally</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        processWorkerExit(w, completedAbruptly);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>代码逻辑很清晰：</p>
<ol>
<li>while循环判断 firstTask不为空或者，getTask 不为空进入循环。</li>
<li>循环中 先判断线程状态，判断是否需要interrupt</li>
<li>task.run() 执行任务</li>
<li>while循环结束 getTask为null，执行processWorkerExit(w, completedAbruptly)结束线程</li>
</ol>
<p>以上关于线程池的任务管理、线程管理和运行状态就介绍完了，中间省略了很多细节，比如线程锁、运行状态的切换等等，这个以后有时间再补充</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践</a></li>
<li><a href="https://juejin.im/entry/58fada5d570c350058d3aaad" target="_blank" rel="noopener">深入理解 Java 线程池：ThreadPoolExecutor</a></li>
<li><a href="https://crossoverjie.top/2018/07/29/java-senior/ThreadPool/" target="_blank" rel="noopener">如何优雅的使用和理解线程池</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Recyclerview 原理解析(一) 布局绘制 &amp; Layoutmanager</title>
    <url>/2020/05/26/android-recyclerview-layoutmanager/</url>
    <content><![CDATA[<p>LayoutManager 是RecyclerView中的布局管理类，用于管理 itemView的布局，官方默认提供了三种实现：线性布局 LinearLayoutManager、网格布局 GridLayoutManager和 流式布局 StaggeredGridLayoutManager，本篇主要依据 LinearLayout 源码进行解析。</p>
<a id="more"></a>

<p>那么现在应该从哪里开始呢？我们有两个切入点可以选择：</p>
<ol>
<li>根据View绘制流程开始追踪：OnMeasure和onLayout</li>
<li>通过setAdapter()开始追踪</li>
</ol>
<p>第一个切入点就不用说了，只要我们在xml里配置了RecyclerView运行代码以后就会触发。我们先来看一下 setAdapter()</p>
<h3 id="setAdapter-adapter"><a href="#setAdapter-adapter" class="headerlink" title="setAdapter(adapter)"></a>setAdapter(adapter)</h3><p>下面我直接把 setAdapter 这条链的代码先贴出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//step01</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAdapter</span><span class="hljs-params">(@Nullable Adapter adapter)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// bail out if layout is frozen</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    setLayoutFrozen(<span class="hljs-keyword">false</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    setAdapterInternal(adapter, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    processDataSetCompletelyChanged(<span class="hljs-keyword">false</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    requestLayout();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>setAdapter() 还是很简单的，总共调用四个方法，第一个和第三个我们可以忽略，setAdapterInternal 主要是设置adapter及其相关配置，暂时也不用关心，最后一行我们发现它调用了 requestLayout，那就回到切入点 1 的情况了。下面我们来按顺序看一下</p>
<h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><p>通过requestLayout发起重绘，首先执行onMeasure，代码如下(已经省略不必要代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthSpec, <span class="hljs-keyword">int</span> heightSpec)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mLayout == <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        defaultOnMeasure(widthSpec, heightSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mLayout.isAutoMeasureEnabled()) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> widthMode = MeasureSpec.getMode(widthSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> heightMode = MeasureSpec.getMode(heightSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        </code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            dispatchLayoutStep1();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayout.setMeasureSpecs(widthSpec, heightSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mState.mIsMeasuring = <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        dispatchLayoutStep2();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (mLayout.shouldMeasureTwice()) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            mState.mIsMeasuring = <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            dispatchLayoutStep2();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">// now we can get the width and height from the children.</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">       <span class="hljs-comment">//......</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>首先第一行就解答了我们第一个问题：如果不设置 LayoutManager，会在设置完宽高以后直接 return</p>
<p>第二个if判断条件是 mLayout.isAutoMeasureEnabled(), 我们这里以LinearLayoutManager为例，返回的是 true，所以我们只需要关注 if 中的操作，else中直接省略即可</p>
<p>了解以上两点，我们重点看一下几个 dispatchLayoutStepN 函数，别的代码可以忽略了，</p>
<h5 id="dispatchLayoutStep1"><a href="#dispatchLayoutStep1" class="headerlink" title="dispatchLayoutStep1()"></a>dispatchLayoutStep1()</h5><p>该函数主要做一些布局开始前的准备工作</p>
<ul>
<li>adapter更新</li>
<li>确定执行动画</li>
<li>存储当前views的信息</li>
<li>有必要的情况下，预先执行一些布局操作，同时存储信息</li>
</ul>
<p>最后需要把 mState.mLayoutState 状态从START改为LAYOUT。</p>
<h5 id="dispatchLayoutStep2"><a href="#dispatchLayoutStep2" class="headerlink" title="dispatchLayoutStep2()"></a>dispatchLayoutStep2()</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> * The second layout step where we do the actual layout of the views for the final state.</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> * This step might be run multiple times if necessary (e.g. measure).</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> */</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatchLayoutStep2</span><span class="hljs-params">()</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    startInterceptRequestLayout();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    onEnterLayoutOrScroll();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.assertLayoutStep(State.STEP_LAYOUT | State.STEP_ANIMATIONS);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mAdapterHelper.consumeUpdatesInOnePass();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mItemCount = mAdapter.getItemCount();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mDeletedInvisibleItemCountSincePreviousLayout = <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// Step 2: Run layout</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mInPreLayout = <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mLayout.onLayoutChildren(mRecycler, mState);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mStructureChanged = <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mPendingSavedState = <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mRunSimpleAnimations = mState.mRunSimpleAnimations &amp;&amp; mItemAnimator != <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mLayoutStep = State.STEP_ANIMATIONS;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    onExitLayoutOrScroll();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    stopInterceptRequestLayout(<span class="hljs-keyword">false</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>这一步是真正在进行布局的关键，可能会执行多次，比如onMeasure中if中最后一个条件语句就是根据 mLayout.shouldMeasureTwice() 判断是否要再执行一次</p>
<p>既然是关心真正布局的地方，那我们根据注释可以看到run layout注释行下调用了 <strong>mLayout.onLayoutChildren(mRecycler, mState)</strong> </p>
<p>稍后我们再看具体实现，先返回onMeasure，执行完毕setMeasuredDimensionFromChildren，这是从children 拿到的宽高参数，重新设置后，onMeasure 执行完毕。</p>
<h3 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h3><p>看完了onMeasure，我们来看一下OnLayout</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLayout</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> changed, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> b)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    dispatchLayout();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    TraceCompat.endSection();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mFirstLayoutComplete = <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>代码很少，很直观，我们直接关注 dispatchLayout()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dispatchLayout</span><span class="hljs-params">()</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mAdapter == <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        Log.e(TAG, <span class="hljs-string">"No adapter attached; skipping layout"</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// leave the state in START</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mLayout == <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        Log.e(TAG, <span class="hljs-string">"No layout manager attached; skipping layout"</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// leave the state in START</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    mState.mIsMeasuring = <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        dispatchLayoutStep1();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayout.setExactMeasureSpecsFrom(<span class="hljs-keyword">this</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        dispatchLayoutStep2();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth()</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            || mLayout.getHeight() != getHeight()) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// First 2 steps are done in onMeasure but looks like we have to run again due to</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// changed size.</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayout.setExactMeasureSpecsFrom(<span class="hljs-keyword">this</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        dispatchLayoutStep2();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// always make sure we sync them (to ensure mode is exact)</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayout.setExactMeasureSpecsFrom(<span class="hljs-keyword">this</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    dispatchLayoutStep3();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>
<p>同样这里也需要根据一系列条件判断是否要执行 dispatchLayoutStepN 函数，step1和 step2我们已经看过，直接看最后的 dispatchLayoutStep3()</p>
<h5 id="dispatchLayoutStep3"><a href="#dispatchLayoutStep3" class="headerlink" title="dispatchLayoutStep3()"></a>dispatchLayoutStep3()</h5><p>该函数的作用跟 step1 很类似，不同的是调用时机是在 step2执行之后，也就是真正布局完成后，用于存储最终的动画信息，以及重置一些必要参数</p>
<p>至此onLayout也简单看完了，抛开细节就显得清晰多了。最后还有一个onDraw方法这里就不再看了，它主要跟ItemDecoration 使用有关</p>
<p>但是到目前为止我们好像遇到的都是 RecyclerView 自身的绘制流程，并没有接触到处理 itemView相关的细节，所以这就轮到 前面留的一个坑了，下面我们回到 dispatchLayoutStep2() 看一看是怎么处理 itemView 的布局的</p>
<h3 id="mLayout-onLayoutChildren-mRecycler-mState"><a href="#mLayout-onLayoutChildren-mRecycler-mState" class="headerlink" title="mLayout.onLayoutChildren(mRecycler, mState)"></a>mLayout.onLayoutChildren(mRecycler, mState)</h3><p>mLayout.onLayoutChildren(mRecycler, mState) 在 LayoutManager 中是空实现，这说明它将关于itemView具体布局方式交给了 itemView去实现， 这也就解释了为什么我们可以通过重写 LayoutManager来自定义布局方式</p>
<p>依据 LinearLayoutManager 中该方法实现，官方给出了布局算法的解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// layout algorithm:</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1) by checking children and other variables, find an anchor coordinate and an anchor item position.</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2) fill towards start, stacking from bottom</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3) fill towards end, stacking from top</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4) scroll to fulfill requirements like stack from bottom.create layout state</span></code></pre></td></tr></table></figure>
<p>大致意思就是通过检查 children和其他变量，得到一个坐标锚点和锚点 item 的索引，然后从这个锚点开始，向上布局的话就从下往上填充， 从锚点往下布局，就从上往下布局。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLayoutChildren</span><span class="hljs-params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mAnchorInfo.mLayoutFromEnd) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// fill towards start</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        updateLayoutStateToFillStart(mAnchorInfo);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayoutState.mExtraFillSpace = extraForStart;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        fill(recycler, mLayoutState, state, <span class="hljs-keyword">false</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        startOffset = mLayoutState.mOffset;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> firstElement = mLayoutState.mCurrentPosition;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (mLayoutState.mAvailable &gt; <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            extraForEnd += mLayoutState.mAvailable;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// fill towards end</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        updateLayoutStateToFillEnd(mAnchorInfo);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayoutState.mExtraFillSpace = extraForEnd;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        mLayoutState.mCurrentPosition += mLayoutState.mItemDirection;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        fill(recycler, mLayoutState, state, <span class="hljs-keyword">false</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        endOffset = mLayoutState.mOffset;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        </code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    </code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>这段代码很长，我们需要关注的只有一个 fill 函数，这里如果找不到也没关系，可以尝试逆向思维，从Adapter.onCreateViewHolder 那边向前追溯，这里就不再演示了。</p>
<h4 id="fill-recycler-mLayoutState-state-false"><a href="#fill-recycler-mLayoutState-state-false" class="headerlink" title="fill(recycler, mLayoutState, state, false);"></a>fill(recycler, mLayoutState, state, false);</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fill</span><span class="hljs-params">(RecyclerView.Recycler recycler, LayoutState layoutState,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            RecyclerView.State state, <span class="hljs-keyword">boolean</span> stopOnFocusable)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// max offset we should set is mFastScroll + available</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> start = layoutState.mAvailable;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> remainingSpace = layoutState.mAvailable + layoutState.mExtraFillSpace;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        LayoutChunkResult layoutChunkResult = mLayoutChunkResult;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> ((layoutState.mInfinite || remainingSpace &gt; <span class="hljs-number">0</span>) &amp;&amp; layoutState.hasMore(state)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            layoutChunkResult.resetInternal();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (RecyclerView.VERBOSE_TRACING) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                TraceCompat.beginSection(<span class="hljs-string">"LLM LayoutChunk"</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            layoutChunk(recycler, state, layoutState, layoutChunkResult);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (DEBUG) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            validateChildOrder();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> start - layoutState.mAvailable;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr></table></figure>

<p>fill 函数开始填充布局，while 循环处可以看出它是在不停的循环填充大块布局直到剩余空间用完为止，但是我们并没有看到直接取出来children进行计算的代码，于是我们考虑是在 layoutChunk 函数中进行的，继续追下去</p>
<h4 id="layoutChunk-recycler-state-layoutState-layoutChunkResult"><a href="#layoutChunk-recycler-state-layoutState-layoutChunkResult" class="headerlink" title="layoutChunk(recycler, state, layoutState, layoutChunkResult)"></a>layoutChunk(recycler, state, layoutState, layoutChunkResult)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">layoutChunk</span><span class="hljs-params">(RecyclerView.Recycler recycler, RecyclerView.State state,</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        LayoutState layoutState, LayoutChunkResult result)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    View view = layoutState.next(recycler);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (view == <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) view.getLayoutParams();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (layoutState.mScrapList == <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (mShouldReverseLayout == (layoutState.mLayoutDirection</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                == LayoutState.LAYOUT_START)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            addView(view);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            addView(view, <span class="hljs-number">0</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (mShouldReverseLayout == (layoutState.mLayoutDirection</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                == LayoutState.LAYOUT_START)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            addDisappearingView(view);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            addDisappearingView(view, <span class="hljs-number">0</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    measureChildWithMargins(view, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    result.mConsumed = mOrientationHelper.getDecoratedMeasurement(view);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> left, top, right, bottom;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mOrientation == VERTICAL) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//...</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    layoutDecoratedWithMargins(view, left, top, right, bottom);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// Consume the available space if the view is not removed OR changed</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (params.isItemRemoved() || params.isItemChanged()) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        result.mIgnoreConsumed = <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    result.mFocusable = view.hasFocusable();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>果然第一行就出现了 获取View的代码,到这一步为止我们不再深入去追究如何获取到Children，那是Recycler做的事情，不是本篇关注的重点，我们来梳理剩下的代码</p>
<ol>
<li>拿到View以后addView，也就是Children是在此时被添加到 RecyclerView的。</li>
<li>measureChildWithMargins(view, 0, 0) 对child进行测量，要把间距都计算在内的</li>
<li>计算结果要通过helper类存入到LayoutChunkResult,方便上一层循环计算可使用剩余空间</li>
<li>之后根据 mOrientation 来计算绘制坐标点 top、left、right、bottom</li>
<li>计算完毕调用layoutDecoratedWithMargins(view, left, top, right, bottom)对该child进行布局</li>
</ol>
<p>至此 RecyclerView 的布局管理主线就梳理清楚了。下面是画的简易流程图</p>
<p><img src="http://coderfan.codeagles.com/android-recyclerview-layoutmanager.png" alt="RecyclerView LayoutManager"></p>
]]></content>
      <categories>
        <category>Android</category>
        <category>组件拆解</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android RecyclerView 解析 大纲篇</title>
    <url>/2020/05/25/android-recyclerview-summary/</url>
    <content><![CDATA[<p>RecyclerView 是 Android 中使用最多的控件之一，因此利用 RV 写出高质量的代码或者对老项目进行性能优化 可能大大提升app 性能，因此了解RecyclerView的性能就很有必要。</p>
<a id="more"></a>

<p>首先我们用一张 RecyclerView 的思维导图来直观的了解它的架构：</p>
<p><img src="http://coderfan.codeagles.com/android-recyclerview-summary.png?e=1590401969&token=o8sDcknnEJ98Lnr_NdIO1uHPhg5-4QGXgAevZD23:LQtWWpAmrOpKsNShBL00AE0Pjlk=" alt="RecyyclerView 思维导图"></p>
<h3 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h3><p>RecyclerView 是 ViewGroup 的，因此Android View的绘制流程和事件分发机制同样适用于它，除此之外还需要了解设计模式相关的知识。以下前置知识点可以自行Google搜索或者查看我相关文章(TODO)</p>
<ul>
<li>View 绘制流程<ul>
<li>onMeasure</li>
<li>onLayout</li>
<li>onDraw</li>
<li>requestLayout &amp; invalidate</li>
</ul>
</li>
<li>View 事件分发机制<ul>
<li>onTouchEvent</li>
</ul>
</li>
<li>设计模式<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>观察者模式</li>
</ul>
</li>
</ul>
<h3 id="RecyclerView-架构"><a href="#RecyclerView-架构" class="headerlink" title="RecyclerView 架构"></a>RecyclerView 架构</h3><p>在了解了前置知识点后，我们来看一下 RecyclerView 的架构，通常我们自定义 ViewGoup 的时候 子View(itemView) 的大小、位置、甚至数据模型都是大致确定的，因此可以直接写到对应实现处。但是想想列表的使用场景，我们发现，要实现一个RecyclerView，它既不知道子View大小会是多少、位置摆放在哪里，也不知道填充的数据源模型是什么样的。</p>
<p>那么问题来了，一个什么规则都不知道的控件要怎么定义呢？RecyclerView 给了一个很好的解答。总结起来可以说就是一句话，只要提供一套行之有效的规则，以后都按照这套规则实现就可以了，怎么说？</p>
<ol>
<li>不知道子View的大小和摆放？那就约定一个LayoutManager，由它去管理 itemView 的绘制，同时提供了三个已经实现的LayoutManager类，事实上这三种LayoutManager已经足以应付大部分开发需求。</li>
<li>不清楚数据源模型？那就借助适配器模式，提供一个Adapter来将数据源转换成 RecyclerView可使用的 ViewHolder 填充视图</li>
<li>为了优雅和美观，RecyclerView还提供了可以自定义动画和装饰的方法，只要实现 ItemAnimator、ItemDecoration即可</li>
</ol>
<p>下面我会分具体几篇文章对 RecyclerView 进行拆解：</p>
<ul>
<li><a href="https://coderfan.cn/2020/05/26/android-recyclerview-layoutmanager/">Android Recyclerview 原理解析(一) 布局绘制 &amp; Layoutmanager</a></li>
<li>[RecyclerView 缓存复用 Recycler]</li>
<li>[RecyclerView 滑动场景分析]</li>
<li>[RecyclerView 装饰类 itemDecoration]</li>
<li>[itemAnmiator]</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
        <category>组件拆解</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 平方数之和</title>
    <url>/2020/05/21/leetcode-633-judge-square-sum/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/" target="_blank" rel="noopener">平方数之和</a></p>
<blockquote>
<p>给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a^2 + b^2 = c。</p>
<p>示例1：<br>输入: 5<br>输出: True<br>解释: 1 * 1 + 2 * 2 = 5</p>
<p>示例2<br>输入: 3<br>输出: False</p>
</blockquote>
<a id="more"></a>

<h4 id="解法一：暴力破解"><a href="#解法一：暴力破解" class="headerlink" title="解法一：暴力破解"></a>解法一：暴力破解</h4><p>暴力破解思路比较简单：</p>
<ol>
<li>首先求出 c 的平方数 sqrt，那么 a 或者 b 都不会大于这个平方数，由此确定 取值范围[0,sqrt]</li>
<li>给 a 依次设定目标范围内的取值，求出 a 的二次方和 c 的差值 m</li>
<li>理论来说 m 开平方得到的就是b，但是需要判断 m 是不是一个平方数，也就是 b的二次方取值是不是正好等于m</li>
<li>找到符合条件的 b 即可返回 true，循环结束没有符合条件，返回false</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judgeSquareSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> sqrt = (<span class="hljs-keyword">int</span>) Math.sqrt(c);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= sqrt; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> m = c - i * i;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> a = (<span class="hljs-keyword">int</span>) Math.sqrt(m);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (a * a == m)&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>这种解法的时间复杂度是 O(n)，测试结果：超过 22% 的提交，显然是低效的，而且需要借助 Math 相关API，更不完美了。</p>
<h4 id="解法二：二分查找法"><a href="#解法二：二分查找法" class="headerlink" title="解法二：二分查找法"></a>解法二：二分查找法</h4><p>如果不借助 Math API，那么我们就得扩大搜索范围，a 取值从0 开始直到平方值大于 c 为止，然后差值就是 b 的目标平方值，而要寻找 是否有符合条件的 b，可以用到二分查找方法，思路如下：</p>
<ol>
<li>循环遍历直到 a * a &gt;= c，每次循环得到 b 的目标平方值 m</li>
<li>从[0,m] 范围对筛选是否有符合条件的b，下面来看如何使用二分查找</li>
<li>取范围start 和end 的中值mid，判断mid * mid 与 m 的关系</li>
<li>如果比 m 大，说明中值过大，往小的范围去找[mid+1,end]</li>
<li>如果比 m 小，说明中值太小，去大的范围找 [start,mid-1]</li>
<li>设定终止条件，如果 start 已经大于 end 了，那就返回false</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judgeSquareSum2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> a = <span class="hljs-number">0</span>; a * a &lt;= c; a++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> m = c - (<span class="hljs-keyword">int</span>) (a * a);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (binarySearch(<span class="hljs-number">0</span>, m, m)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (start &gt; end) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">long</span> mid = (start + end) / <span class="hljs-number">2</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mid * mid == m) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (mid * mid &gt; m) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> binarySearch(start, mid - <span class="hljs-number">1</span>, m);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> binarySearch(mid + <span class="hljs-number">1</span>, end, m);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>时间复杂度：<br>首先外层循环的复杂度是：O(n), 二分查找的时间复杂度是 Logn,<br>所以总的时间复杂度应该是 nLog n</p>
<p>二分查找，虽然提高了查询效率，但是抵不过范围太大，因此效率还不如sqrt 函数。这种方法也不完美。</p>
<h4 id="方法三：费马平方和定理"><a href="#方法三：费马平方和定理" class="headerlink" title="方法三：费马平方和定理"></a>方法三：费马平方和定理</h4><p>费马平方和 这个涉及到知识盲区了，没看懂，待补充</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>AppBarLayout 滑动监听异常：requestLayout() improperly called by android.view.View</title>
    <url>/2020/04/10/android-request-layout-improperly/</url>
    <content><![CDATA[<p>最近在项目里发现一个关于AppBarLayout 滑动监听异常，就是监听它的滑动事件时，控制台一直在抛如下异常：</p>
<blockquote>
<p>W/View: requestLayout() improperly called by android.view.View{df595e9 V.ED….. …….. 0,726-1080,726 #7f0902d8 app:id/statusBarSpace} during second layout pass: posting in next frame<br>W/View: requestLayout() improperly called by com.google.android.material.appbar.AppBarLayout{e6dac58 V.E…… ……I. 0,0-1080,789 #7f090070 app:id/bar} during layout: running second layout pass</p>
</blockquote>
<a id="more"></a>

<p>引发原因暂时不清楚，但是根据查询资料，发现只要滚动变化一致的时候不要做处理就能解决了解决代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">bar.addOnOffsetChangedListener(<span class="hljs-keyword">object</span> : AppBarLayout.OnOffsetChangedListener&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">            <span class="hljs-keyword">var</span> lastOffset = -<span class="hljs-number">1</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onOffsetChanged</span><span class="hljs-params">(appBarLayout: <span class="hljs-type">AppBarLayout</span>?, verticalOffset: <span class="hljs-type">Int</span>)</span></span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">                <span class="hljs-keyword">if</span> (lastOffset == verticalOffset)&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">                    <span class="hljs-keyword">return</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">                &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">                lastOffset = verticalOffset</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">                </code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">                \\ 下面写业务代码即可</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs kotlin">        &#125;)</code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 无重复字符的最长子串</title>
    <url>/2020/03/30/leetcode-03-longest-substring-without-repeating-characters/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">无重复字符的最长子串</a></p>
<blockquote>
<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。<br>示例 1:<br>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:<br>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:<br>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
</blockquote>
<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h5 id="思路一：暴力破解法"><a href="#思路一：暴力破解法" class="headerlink" title="思路一：暴力破解法"></a>思路一：暴力破解法</h5><p>根据题设，一个最简单直接的思路就是从左到右遍历每一种子串，思路如下：</p>
<ol>
<li>从左向右遍历字符串，以经过的字符为起点，向右扩散验证子串是否重复，这里遍历只需要到n-1即可，因为最后一个字符没必要再验证</li>
<li>向右扩散实际上也是一个循环遍历，只不过最大长度是 i 到 n-2。i为起点的子串每次向右扩展一位，判断新加入元素是否已存在，若不存在，则可以继续扩大子串，否则跳出循环，同时比较记录已出现的最大长度。</li>
<li>验证完所有子串得到的最大长度就是无重复最长字符串长度</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length() - <span class="hljs-number">1</span>; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> step = i + <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> (step &lt; s.length()) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            String tempStr = s.substring(i, step);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">char</span> temp = s.charAt(step);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (tempStr.indexOf(temp) == -<span class="hljs-number">1</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                step++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">break</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        maxLength = Math.max(step - i, maxLength);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> maxLength;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>时间复杂度 O(n^2)</p>
<h4 id="思路二：窗口滑动法"><a href="#思路二：窗口滑动法" class="headerlink" title="思路二：窗口滑动法"></a>思路二：窗口滑动法</h4><p>思路一中实际上是存在浪费的情况，比如bacabcbb，当内循环子串加入第二个a的时候，a已经存在，这时候i增加一位，结果还是从a开始，这一次遍历就浪费了。因此可以对算法进行改进，利用窗口滑动，如果遇到上述这种情况，可以直接将子串起点移到第二个a下一位。大致思路如下：</p>
<ol>
<li>需要准备 max 记录可能存在的最大子串长度， start记录子串当前起点，hashmap，用来存储已经出现的字符和它的位置，key=字符，vlaue=下标</li>
<li>开始遍历字符串，循环变量end作为子串准备加入的字符，也就是在源字符串中的位置，用map中是否已经存在该字符<ol>
<li>不存在该字符，计算当前构成新子串，比较记录是否产生新的最大长度。同时map存入该字符的值和下标</li>
<li>如果存在该字符，取出mao中记录的该字符的位置，将start移动到该下标位置下一位 map.get(ch) + 1，说明将原来的重复字符移出了窗口外。然后也需要计算比较最大长度、更新已出现该字符新的下标位置。</li>
</ol>
</li>
<li>遍历结束，得到的max就是目标结果</li>
</ol>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    HashMap&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> end = <span class="hljs-number">0</span>; end &lt; s.length(); end++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">char</span> ch = s.charAt(end);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (map.containsKey(ch)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            start = Math.max(map.get(ch) + <span class="hljs-number">1</span>, start);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        max = Math.max(max, end - start + <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        map.put(ch, end);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> max;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>使用这种办法的时间复杂度是O(n),比思路一要快很多。</p>
<p>PS: 之所以选择hashMap 是因为它存取数据的时间复杂度是O(1)，即使最差也是O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>窗口滑动</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 最长回文子串</title>
    <url>/2020/03/30/leetcode-05-longest-palindrome/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">LeetCode 计算最长回文子串</a></p>
<blockquote>
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。<br>示例 1：<br>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。<br>示例 2：<br>输入: “cbbd”<br>输出: “bb”</p>
</blockquote>
<a id="more"></a>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先我们要了解什么是回文字符串：字符串正着读和反着读一模一样的字符串。比如 abbabb、bbabb， 但是 bd、ababc 这样不是回文字符串。</p>
<p>接着看一下题目，要找到字符串s中所有的回文子串，先排除字符串为空的情况，字符串长度为 1 直接就是最长回文字符串。然后来看一下剩余情况，要知道最长回文子串，最简单直接的方法就是把 字符串所有的子串都找出来，检查是不是回文子串。</p>
<h4 id="暴力破解法"><a href="#暴力破解法" class="headerlink" title="暴力破解法"></a>暴力破解法</h4><p>暴力破解法比较简单，直接上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() &lt; <span class="hljs-number">2</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> s;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    String res = s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; s.length(); j++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> &gt; maxLength &amp;&amp; isPalindrome(s, i, j)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                maxLength = j - i + <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                res = s.substring(i, j + <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> res;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(String src, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">while</span> (left &lt; right) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (src.charAt(left) != src.charAt(right)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        left++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        right--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>暴力破解虽然比较简单，但是时间复杂度也比较高，需要三层循环遍历，也就是O(n^3)，空间复杂度O(1)</p>
<p>暴力解法在数据量较大的时候显然是不合适的，我们可以尝试对算法进行改进，这就需要用到中心扩散法</p>
<h4 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h4><p>中心扩散法是根据回文字符串的特性来解决问题的。每个回文串都有其中心，奇数回文串中心是中间字符，偶数回文串的中心是最终将的空隙，根据这点我们可以去考虑，源字符串从左向右移动指针，以每个字符为中心，向两边扩散找出符合条件的回文串，记录最大回文串结果就是满足题设的答案。</p>
<p>这时候又有一个问题，偶数回文字符串中心是空隙，怎么办？也有两种解法可以考虑</p>
<h5 id="解法一：奇数-偶数一起判断"><a href="#解法一：奇数-偶数一起判断" class="headerlink" title="解法一：奇数+偶数一起判断"></a>解法一：奇数+偶数一起判断</h5><p>我们在指定中心字符进行扩散验证的时候，可以同时使用两个指针，如果两个指针指向一致就是在判断是否存在奇数回文串，如果指针相邻，则是在判断是否存在偶数回文串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() &lt; <span class="hljs-number">2</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> s;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    String res = s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length() - <span class="hljs-number">1</span>; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        String oddStr = centerSpread(s, i, i);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        String evenStr = centerSpread(s, i, i + <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        String maxString = oddStr.length() &gt; evenStr.length() ? oddStr : evenStr;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (maxString.length() &gt; maxLength) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            maxLength = maxString.length();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            res = maxString;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> res;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">centerSpread</span><span class="hljs-params">(String src, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> length = src.length();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> i = left;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> j = right;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; length &amp;&amp; src.charAt(i) == src.charAt(j)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        i--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        j++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> src.substring(i + <span class="hljs-number">1</span>, j);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>
<p>这种解法的时间复杂度是 O(n^2)空间复杂度O(1)</p>
<p>但是这种解法也有缺陷，就是每次还要考虑奇数和偶数回文串，太麻烦。因此引入第三种解法，插入特殊字符来避免考虑奇偶性</p>
<h5 id="解法二：-中心扩散法Plus版"><a href="#解法二：-中心扩散法Plus版" class="headerlink" title="解法二： 中心扩散法Plus版"></a>解法二： 中心扩散法Plus版</h5><p>如果我们给整个字符串前后以及字符间隙都插入特殊字符 “#” （也可以是别的特殊字符，但是不能是字符串中存在的字符），这样奇数回文串判断方式不变，偶数间隙有字符”#”成了跟奇数回文串一样了。缺点就是牺牲了空间效率。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() &lt; <span class="hljs-number">2</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> s;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    String dstStr = addBoundaries(s, <span class="hljs-string">'#'</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dstStr.length(); i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> step = centerSpread(dstStr, i);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (step &gt; maxLength) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            maxLength = step;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">//根据新串中的位置，和目标回文串的宽度计算原字符串中的起始位置</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            start = (i - maxLength) / <span class="hljs-number">2</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> s.substring(start, start + maxLength);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">centerSpread</span><span class="hljs-params">(String src, <span class="hljs-keyword">int</span> center)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> length = src.length();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> left = center - <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> right = center + <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> step = <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; length &amp;&amp; src.charAt(left) == src.charAt(right)) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        left--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        right++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        step++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> step;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">* 构造含有特殊字符的新字符串，长度是源字符串的 2n+1 </code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">*/</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">addBoundaries</span><span class="hljs-params">(String src, <span class="hljs-keyword">char</span> divider)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (src == <span class="hljs-keyword">null</span> || src.length() == <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (src.indexOf(divider) != -<span class="hljs-number">1</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"参数错误，不可以传递已经存在的字符作为分隔符"</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    stringBuilder.append(divider);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> ch : src.toCharArray()) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        stringBuilder.append(ch).append(divider);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> stringBuilder.toString();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>
<p>时间复杂度 O(n^2), 空间复杂度O(1)</p>
<p>代码比较简单，主要对比一下两种解法的区别，Plus版centerSpread()改进了传入参数，原来需要传入两个指针，现在只需要一个中心指针即可，另外返回的step实际上就是符合条件的回文串的长度，这里不直接返回字符串是因为带有特殊字符串，不如直接记录长度和中心位置，进一步计算出在源字符串中的起始和终点位置。</p>
<h5 id="解法三：-Manacher解法"><a href="#解法三：-Manacher解法" class="headerlink" title="解法三： Manacher解法"></a>解法三： Manacher解法</h5><p>更优解法：Manacher解法，时间复杂度只有O(n)，这里我还没考虑清楚，待补充！！！</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cxyxiaowu.com/2869.html" target="_blank" rel="noopener">LeetCode 第五题 最长回文子串</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/2020/03/11/sort-algorithm/</url>
    <content><![CDATA[<h3 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h3><p>已收录：冒泡排序、简单选择排序、简单插入排序、二路归并排序、简单快速排序</p>
<a id="more"></a>

<p>常用排序算法，要掌握的要点：</p>
<ul>
<li>实现思路</li>
<li>时间复杂度</li>
<li>最优时间复杂度，最差时间复杂度</li>
</ul>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是重复遍历元素，对元素进行两两比较，如果遇到顺序错误就进行调换，直到所有元素顺序都没有错误</p>
<blockquote>
<p>思路：</p>
<ol>
<li>相邻元素比较，比如第一个元素和第二个元素比较，大的元素移动到后面</li>
<li>继续比较每一对相邻元素，大的元素放后面，一直到最后一对元素比较完毕，最大的元素就到最后面了</li>
<li>重复上述步骤，再比较时不必比较上一次循环确定的最大元素也就是最后一个元素</li>
<li>重复1-3步骤，直到全部比较完毕</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (arrays == <span class="hljs-keyword">null</span> || arrays.length &lt; <span class="hljs-number">2</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrays.length; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arrays.length - <span class="hljs-number">1</span> - i; j++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (arrays[j] &gt; arrays[j + <span class="hljs-number">1</span>]) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">int</span> temp = arrays[j + <span class="hljs-number">1</span>];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                arrays[j + <span class="hljs-number">1</span>] = arrays[j];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                arrays[j] = temp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>时间复杂度：O(n^2)</p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>简单选择排序也是重复遍历序列。开始未排序序列找到最小元素，放到起始排序位置，再从剩余未排序序列继续查找最小元素，放到已排序序列末尾</p>
<blockquote>
<p>思路：</p>
<ol>
<li>拿每一个跟后续所有元素比较，找到最小元素</li>
<li>最小元素和当前所在元素交换位置</li>
<li>重复1、2步骤直到所有元素都遍历了一遍</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] selectionSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (arrays == <span class="hljs-keyword">null</span> || arrays.length &lt; <span class="hljs-number">2</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> length = arrays.length;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> minIndex;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        minIndex = i;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//这里使用i+1，因为每次遍历之后第一项肯定是最小的，否则会引入脏数据</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; length; j++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (arrays[j] &lt; arrays[minIndex]) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                minIndex = j;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> temp = arrays[i];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        arrays[i] = arrays[minIndex];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        arrays[minIndex] = temp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>所用时间复杂度也是O(n^2)</p>
<h4 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h4><p>插入排序法，从最小子序列开始构建有序序列，每次从未排序序列往子序列加入一个元素，就对该元素进行排序。直到子序列和目标序列一样大</p>
<blockquote>
<p>思路：</p>
<ol>
<li>从第二个元素开始遍历数组，每一轮拿当前位置元素跟前面所有元素比较</li>
<li>比较过程中，比当前元素大的后移一位，直到遇到第一个比当前元素小的元素</li>
<li>将当前元素插入到小元素后面一位</li>
<li>重复1-3步骤直到全部遍历完毕</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] insertionSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> length = arrays.length;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> preIndex, currValue;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; length; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        preIndex = i - <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        currValue = arrays[i];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> (preIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; arrays[preIndex] &gt; currValue) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            arrays[preIndex + <span class="hljs-number">1</span>] = arrays[preIndex];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            preIndex--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        arrays[preIndex + <span class="hljs-number">1</span>] = currValue;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>所用时间复杂度也是O(n^2)</p>
<h4 id="归并排序（二路归并排序）"><a href="#归并排序（二路归并排序）" class="headerlink" title="归并排序（二路归并排序）"></a>归并排序（二路归并排序）</h4><p>归并排序采用的是分治的思想，将已有序子序列合并，得到完全有序序列，因此需要先拿到有序子序列，让子序列在段间有序。常用的是二路归并排序。</p>
<p>实现思路：</p>
<blockquote>
<ol>
<li>将长度为n的序列拆分为两个长度为n/2的序列</li>
<li>对子序列进行1的操作，找到最小序列，开始向上归并</li>
<li>归并过程中对子序列进行排序，最终拿到两段有序子序列</li>
<li>最终两个子序列合并排序，形成完全有序序列</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] mergeSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (arrays.length &lt; <span class="hljs-number">2</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> n = arrays.length / <span class="hljs-number">2</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span>[] left = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span>[] right = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arrays.length - n];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    System.arraycopy(arrays,<span class="hljs-number">0</span>,left,<span class="hljs-number">0</span>,left.length);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    System.arraycopy(arrays,n,right,<span class="hljs-number">0</span>,right.length);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> mergeArrays(mergeSort(left), mergeSort(right));</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> * 对左右数组进行合并排序</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> */</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] mergeArrays(<span class="hljs-keyword">int</span>[] left, <span class="hljs-keyword">int</span>[] right) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span>[] mergeArrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[left.length + right.length];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, index = <span class="hljs-number">0</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mergeArrays.length; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (a &gt;= left.length) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            mergeArrays[i] = right[b];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            b++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b &gt;= right.length) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            mergeArrays[i] = left[a];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            a++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (left[a] &lt; right[b]) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                mergeArrays[i] = left[a];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                a++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                mergeArrays[i] = right[b];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                b++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> mergeArrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>归并排序的时间复杂度分析：</p>
<ol>
<li>看mergeArrays函数，时间复杂度是O(n)</li>
<li>再看mergeSort函数，虽然使用了递归，但是核心是分治，也就是把n进行k次对半拆分，也就是 2^k = n,所以时间复杂度就是log n</li>
<li>综合1和2可以得到，函数整体时间复杂度是 O(log n)</li>
<li>因为无论序列中元素是否有序，都要进行分治，所以最好时间复杂度和最坏时间复杂度应该是一致的</li>
</ol>
<p>稳定性分析：<br>因为两个相同元素不会改变先后位置，所以是稳定的。</p>
<p>总结：</p>
<ul>
<li>平均时间复杂度 O(nlog n)</li>
<li>最好和最差时间复杂度都是 O(nlog n)</li>
<li>二路归并排序属于稳定排序</li>
</ul>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序：选定一个基准，经过一次排序将序列分为两个子序列，一部分比基准小，一部分比基准大。然后对子序列进行同样操作，最终实现序列有序。</p>
<p>实现思路：</p>
<ol>
<li>选定第一个元素作为基准元素，使用两个指针，分别指向第一个元素和最后一个元素</li>
<li>先用右边的指针与基准比较，直到遇见第一个比基准小的元素停止(先不考虑指针相遇)</li>
<li>再用左边元素与基准元素比较，直到遇见比基准大的元素停止(先不考虑相遇情况)</li>
<li>将左右元素此时指向的元素调换位置</li>
<li>继续重复2~4步骤，直到指针相遇。注意2、3步骤有可能出现没有符合条件直接相遇的情况。这两种相遇情况下，都把此时相遇为止元素 同基准元素调换位置</li>
<li>此时基准元素作为分割点，左边都是小元素序列，右边都是大元素序列。分别对左右序列(不包括基准元素)，递归执行1~5步骤，直到分割后左右指针相遇为止。</li>
</ol>
<p>上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] quickSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> quickSort(arrays, <span class="hljs-number">0</span>, arrays.length - <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] quickSort(<span class="hljs-keyword">int</span>[] arrays, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (left &lt; right) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//标定基准，同时以基准对arrays left-right进行快速排序</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> partition = partition(arrays, left, right);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//对基准左边数组进行快排</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        quickSort(arrays, left, partition - <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//对基准右边数组进行快排</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        quickSort(arrays, partition + <span class="hljs-number">1</span>, right);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arrays, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> pivot = arrays[left];<span class="hljs-comment">//锚定基准点</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> j = right;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> i = left;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">while</span> (i &lt; j) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 从右侧开始检查，找到第一个小于基数的元素位置</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arrays[j] &gt;= pivot) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            j--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//从左侧开始找，找到第一个大于基数的元素位置</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arrays[i] &lt;= pivot) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            i++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//只有位置不同的时候再交换</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (i != j) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            swap(arrays, i, j);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//同一位置没必要交换</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (left != i) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        swap(arrays, left, i);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> i;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] swap(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> temp = array[i];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    array[i] = array[j];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    array[j] = temp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> array;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>时间复杂度：</p>
<p>结论：最好时间复杂度是O(1),最差时间复杂度是O(n^2),平均时间复杂度是O(nlog n)<br>分析：</p>
<ul>
<li>n = 1 的时候，直接就返回了，O(1)</li>
<li>n &gt; 1<ul>
<li>假设每次序列都是恰好从中间分割，那n可以分2^k层，也就是log n，而每一层不管分多少子序列，加起来都是遍历n次。log n 层 n次遍历，可以得到平均时间复杂度O(nlog n)</li>
<li>最差的情况就是，每次基准点都是在序列一边，导致分了n层，每一层遍历n次，时间复杂度O(n^2)</li>
</ul>
</li>
</ul>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序（Heapsort）：利用堆数据结构设计的排序算法</p>
<p>tips：关于堆排序使用时仍然可以利用数组，但是要在脑海中构建出堆的数据结构模型。而构建的模型跟二叉树是一样的，所以可以借用二叉树的一些概念</p>
<p>实现堆排序必须知道的：</p>
<ul>
<li>确定堆中第一个非叶子节点：length/2 -1</li>
<li>针对每个非叶子节点，他的左右子节点都是 2i+1 和 2i+2</li>
<li>需要知道堆的两种模型：大顶堆和小顶堆<ul>
<li>大顶堆：每个节点都大于等于它的左右节点的堆</li>
<li>小顶堆：每个节点都小于等于它的左右孩子节点的堆</li>
</ul>
</li>
</ul>
<p>tips： 大顶堆一般用于构建升序序列，小顶堆用于构建降序序列。</p>
<p>了解了以上节点，可以来看一下实现思路</p>
<ol>
<li>首先需要从第一个非叶子节点开始遍历数组，从下到上，从右到左，构建大顶堆</li>
<li>此时大顶堆根节点就是最大元素，将他与最后一个叶子节点交换位置。</li>
<li>排除最后一个叶子节点，重新调整大顶堆</li>
<li>重复步骤2-3直到还剩一个元素为止。此时序列就已经是有序并且升序的了，</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] heapSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> length = arrays.length;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//首先构建大顶堆</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//找到第一个非叶子节点，下到上，右到左。</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 可以自行画图找规律 length / 2 - 1</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        adjustHeap(arrays, i, length);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//每次把堆顶元素与末尾元素交换，堆减少一个元素，直到遍历完成</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//交换堆顶元素,与末尾元素</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        swap(arrays, <span class="hljs-number">0</span>, i);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//重新构建大顶堆</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        adjustHeap(arrays, <span class="hljs-number">0</span>, i);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> * 堆排序核心 - 调整 大顶堆</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"> */</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arrays, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> length)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> temp = arrays[i];<span class="hljs-comment">//临时存储 i 对应元素</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//每次选取指定节点的左节点进行比较</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; k &lt; length; k = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//比较左右节点大小，右节点大选择右节点作为比较对象</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (k + <span class="hljs-number">1</span> &lt; length &amp;&amp; arrays[k] &lt; arrays[k + <span class="hljs-number">1</span>]) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            k++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//比较和temp元素的大小, 若temp小则被换掉</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 因为每次比较的都是temp，k位置元素不用改变，最后再改变即可</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (arrays[k] &gt; temp) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            arrays[i] = arrays[k];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            i = k;<span class="hljs-comment">//i直接用来存储每次交换后新的k的位置</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//最终i的值确定以后把临时temp存进去，完成大顶堆的调整</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    arrays[i] = temp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> temp = array[i];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    array[i] = array[j];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    array[j] = temp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>关于时间复杂度：堆排序的时间复杂度三种情况都是O(nLog n)</p>
<ol>
<li>首先分析核心代码 adjustHeap 中的时间复杂度 2的m次方等于n，执行次数也就是 （log n） 次</li>
<li>然后分析heapSort 两个for循环实际上是 nLog n + nLog n<br>综上时间复杂度是 O(nLog n)</li>
</ol>
<h4 id="计数排序-amp-桶排序"><a href="#计数排序-amp-桶排序" class="headerlink" title="计数排序&amp;桶排序"></a>计数排序&amp;桶排序</h4><p>计数排序是一种特殊的桶排序，他们的思想是一致的，都是借助开辟新的内存空间进行排序</p>
<h5 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h5><p>先来看简单的计数排序实现思路</p>
<ol>
<li>遍历原数组，找出最大和最小元素，根据最大和最小元素创建 计数数组 bucketArray 容量，相当于min、min+1、min+2··· max 所有元素都有对应位置</li>
<li>遍历原数组，记录每一个元素出现次数，存入 bucketArray 中，这里有一个前提条件，在存入次数的时候实际上已经把顺序确定了</li>
<li>创建新的数组 dstArray，用于存放排序后的元素</li>
<li>此时如果把bucketArray中次数大于0的位置，找到srcArrays中对应的值，依次插入 dstArray n次就是有序序列了，下面转换成代码思路<ol>
<li>遍历 bucketArray 数组，重新计算每一项的值等于它的值加上前一项的值，这就意味着按照步骤3的思路，任意值在 dstArray 中的最大可能位置就确定了。</li>
<li>遍历原数组，根据 bucketArray[i]确定插入位置，之后 bucketArray[i]– , 下次重复数据就会插入到后一个位置</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] countingSort(<span class="hljs-keyword">int</span>[] arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> (arrays == <span class="hljs-keyword">null</span> || arrays.length &lt;= <span class="hljs-number">1</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">return</span> arrays;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> min = arrays[<span class="hljs-number">0</span>], max = arrays[<span class="hljs-number">0</span>];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> srcLength = arrays.length;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//遍历找到最大值和最小值</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> temp : arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        max = Math.max(temp, max);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        min = Math.min(temp, min);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//构建计数数组</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> bucketLength = max - min + <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span>[] bucketArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[bucketLength];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//再次遍历原数组，找出元素重复数量</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> array : arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        bucketArray[array - min]++;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//每一项与前一项叠加</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; bucketLength; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        bucketArray[i] += bucketArray[i - <span class="hljs-number">1</span>];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//开始再次遍历原数组</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span>[] dstArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[srcLength];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = srcLength - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> target = arrays[i];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//计算得到当前元素之前又多少个元素</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> bucketIndex = target - min;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> index = bucketArray[bucketIndex] - <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        dstArray[index] = target;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        bucketArray[bucketIndex]--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> dstArray;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>计数排序的时间复杂度是O(n),但是他更适用于序列不大比较集中的情况。因为要开辟额外的存储空间，所以数据比较分散的时候就不适合了，会浪费空间</p>
<h5 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h5><p>桶排序也需要开辟新的存储空间，可以使用链表型数据结构来实现，java里更常用的是ArrayList</p>
<p>实现思路：</p>
<ol>
<li>找到序列最大最小值，将最大最小值之间的范围进行 n 等分，这个可以自行决定，一般来说n越大排序越快，但是消耗空间更多</li>
<li>遍历序列，计算应该插入桶中哪个位置</li>
<li>遍历桶，每一项中元素进行排序</li>
<li>将桶中所有子序列取出来，拼接起来就是有序序列</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bucketSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arrays)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> min = arrays[<span class="hljs-number">0</span>], max = arrays[<span class="hljs-number">0</span>];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> srcLength = arrays.length;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//遍历找到最大值和最小值</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> temp : arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        max = Math.max(temp, max);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        min = Math.min(temp, min);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//也可以使用别的分组方式</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> bucketSize = (max - min) / srcLength + <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//构建桶</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    List&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bucketSize; i++) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        bucketList.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> array : arrays) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> index = (array - min) / srcLength;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        bucketList.get(index).add(array);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//对桶中元素进行排序</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (ArrayList&lt;Integer&gt; item : bucketList) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (!item.isEmpty())&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-comment">//使用官方API，也可以根据需要使用别的排序法</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            Collections.sort(item);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    System.out.println(<span class="hljs-string">"bucket arrays: "</span> + bucketList.toString());</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>时间复杂度分析：</p>
<p>最好情况：O(n)，一般n分的越多时间复杂度越低，但是空间消耗越高</p>
<p>如果n设定合理，时间复杂度就取决于桶中子序列排序的时间复杂度了应该是 n * O(f(n))</p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3><p>由于理解不透彻暂不记录，但是标记以防以往。</p>
<ul>
<li>希尔排序</li>
<li>快速排序的多种思路</li>
<li>空间复杂度</li>
</ul>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ol>
<li><a href="https://www.cnblogs.com/onepixel/p/7674659.html" target="_blank" rel="noopener">十大经典排序算法（动图演示）</a></li>
<li><a href="https://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="noopener">图解排序算法-希尔排序</a></li>
<li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">图解排序算法-堆排序</a></li>
</ol>
<h4 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h4><ul>
<li>20200321 新增堆排序</li>
<li>20200314 新增快速排序</li>
<li>20200311 创建本文，新增冒泡排序、选择排序、插入排序、归并排序</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 合并数组</title>
    <url>/2020/03/04/leetcode-merge-array/</url>
    <content><![CDATA[<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><p>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。初始化 A 和 B 的元素数量分别为 m 和 n。示例如下:</p>
<blockquote>
<p>输入<br>A = [1,2,3,0,0,0], m = 3<br>B = [2,5,6],       n = 3<br>输出: [1,2,2,3,5,6]</p>
</blockquote>
<a id="more"></a>

<h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge01</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span> n)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                System.arraycopy(B, <span class="hljs-number">0</span>, A, <span class="hljs-number">0</span>, n);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">return</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> stepA = m - <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> stepB = n - <span class="hljs-number">1</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">int</span> step = (m + n - <span class="hljs-number">1</span>);</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">while</span> (step &gt;= <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (stepB &lt; <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                A[step] = A[stepA];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                stepA--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                step--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">continue</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (stepA &lt; <span class="hljs-number">0</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                A[step] = B[stepB];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                stepB--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                step--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">continue</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            <span class="hljs-keyword">if</span> (A[stepA] &gt; B[stepB]) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                A[step] = A[stepA];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                stepA--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125; <span class="hljs-keyword">else</span> &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                A[step] = B[stepB];</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">                stepB--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">            step--;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr></table></figure>

<p>解题思路</p>
<p>首先已知条件是 A数组有足够的剩余空间容纳B数组，所以一个很简单的思路就是直接把B数组加入到A数组进行快排，但是因为AB都是有序数组，快排会带来大量的冗余操作。所以考虑优化一下：<br>AB都是已经排序的数组，又已经AB初始化长度，那可以在插入的时候就开始进行比较。思路如下：</p>
<ol>
<li>根据m、n计算出AB合并后总长度 m+n</li>
<li>声明三个指针stepA、stepB、step，分别指向A、B末端，以及合并后A末端</li>
<li>这一步是关键，根据stepA或者stepB从AB中取出元素进行比较，谁的元素大就把该元素取出来放到step指向位置，同时取出元素的数组指针(stepA 或者 stepB)前移一位,另一个指针不变，step也需要在元素插入后前移一位。</li>
<li>重复步骤三直到stepA小于0或者stepB小于零，那就把没有取完的数组剩余元素都插入step循环到0为止指向的位置。当step也小于0的时候跳出循环，就完成了AB数组的合并</li>
</ol>
<p>PS：</p>
<ol>
<li>这里需要考虑边界条件，A或者B为空的时候，以及while循环的跳出条件。</li>
<li>因为m+n 提供了足够的长度，因此在比较过程中不必担心从A或者B中取出来的元素在插入的过程中会覆盖A中未用到的元素。</li>
</ol>
<p>时间复杂度是O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 反转链表</title>
    <url>/2020/03/02/leetcode-206-reverse-list/</url>
    <content><![CDATA[<h3 id="反转一个链表"><a href="#反转一个链表" class="headerlink" title="反转一个链表"></a>反转一个链表</h3><blockquote>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
</blockquote>
<p>进阶： 迭代|递归反转链表 </p>
<a id="more"></a>

<p>前置条件：链表数据结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前置条件</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> val;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> ListNode next;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        val = x;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>


<h4 id="解法一：暴力解法"><a href="#解法一：暴力解法" class="headerlink" title="解法一：暴力解法"></a>解法一：暴力解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解法</span></code></pre></td></tr><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    ListNode node = <span class="hljs-keyword">null</span>;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        ListNode temp = head.next;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        head.next = node;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        node = head;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">        head = temp;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    &#125;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">return</span> node;</code></pre></td></tr><tr><td class="code"><pre><code class="hljs java">&#125;</code></pre></td></tr></table></figure>

<p>解题思路：</p>
<p>链表反转思路就是反转每一个节点的指针就可以了，以此为思路步骤如下：</p>
<ol>
<li>声明一个新的链表用于装载反转后的链表，即目标链表</li>
<li>循环遍历原链表<ol>
<li>每次从原链表取出一个元素，将该元素指向目标链表，成为目标链表新的头部节点</li>
<li>原链表指向下一个节点，也就是少了一个元素</li>
<li>重复循环1和2步骤直到原链表为null,跳出循环</li>
</ol>
</li>
<li>此时目标链表就实现了对原链表的反转</li>
</ol>
<p>该方法时间复杂度是：O(n) </p>
<h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><p>考虑思路是递归，但是还没想到，待补充！！！</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>链表</tag>
      </tags>
  </entry>
</search>
