<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode 最长回文子串</title>
    <url>/2020/03/30/leetcode-05-longest-palindrome/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">LeetCode 计算最长回文子串</a></p>
<blockquote>
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。<br>示例 1：<br>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。<br>示例 2：<br>输入: “cbbd”<br>输出: “bb”</p>
</blockquote>
<a id="more"></a>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先我们要了解什么是回文字符串：字符串正着读和反着读一模一样的字符串。比如 abbabb、bbabb， 但是 bd、ababc 这样不是回文字符串。</p>
<p>接着看一下题目，要找到字符串s中所有的回文子串，先排除字符串为空的情况，字符串长度为 1 直接就是最长回文字符串。然后来看一下剩余情况，要知道最长回文子串，最简单直接的方法就是把 字符串所有的子串都找出来，检查是不是回文子串。</p>
<h4 id="暴力破解法"><a href="#暴力破解法" class="headerlink" title="暴力破解法"></a>暴力破解法</h4><p>暴力破解法比较简单，直接上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String res = s.substring(<span class="number">0</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (j - i + <span class="number">1</span> &gt; maxLength &amp;&amp; isPalindrome(s, i, j)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                maxLength = j - i + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res = s.substring(i, j + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String src, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (src.charAt(left) != src.charAt(right)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        left++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        right--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>暴力破解虽然比较简单，但是时间复杂度也比较高，需要三层循环遍历，也就是O(n^3)，空间复杂度O(1)</p>
<p>暴力解法在数据量较大的时候显然是不合适的，我们可以尝试对算法进行改进，这就需要用到中心扩散法</p>
<h4 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h4><p>中心扩散法是根据回文字符串的特性来解决问题的。每个回文串都有其中心，奇数回文串中心是中间字符，偶数回文串的中心是最终将的空隙，根据这点我们可以去考虑，源字符串从左向右移动指针，以每个字符为中心，向两边扩散找出符合条件的回文串，记录最大回文串结果就是满足题设的答案。</p>
<p>这时候又有一个问题，偶数回文字符串中心是空隙，怎么办？也有两种解法可以考虑</p>
<h5 id="解法一：奇数-偶数一起判断"><a href="#解法一：奇数-偶数一起判断" class="headerlink" title="解法一：奇数+偶数一起判断"></a>解法一：奇数+偶数一起判断</h5><p>我们在指定中心字符进行扩散验证的时候，可以同时使用两个指针，如果两个指针指向一致就是在判断是否存在奇数回文串，如果指针相邻，则是在判断是否存在偶数回文串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String res = s.substring(<span class="number">0</span>, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - <span class="number">1</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String oddStr = centerSpread(s, i, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String evenStr = centerSpread(s, i, i + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String maxString = oddStr.length() &gt; evenStr.length() ? oddStr : evenStr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (maxString.length() &gt; maxLength) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            maxLength = maxString.length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res = maxString;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">centerSpread</span><span class="params">(String src, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> length = src.length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> j = right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &lt; length &amp;&amp; src.charAt(i) == src.charAt(j)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> src.substring(i + <span class="number">1</span>, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>这种解法的时间复杂度是 O(n^2)空间复杂度O(1)</p>
<p>但是这种解法也有缺陷，就是每次还要考虑奇数和偶数回文串，太麻烦。因此引入第三种解法，插入特殊字符来避免考虑奇偶性</p>
<h5 id="解法二：-中心扩散法Plus版"><a href="#解法二：-中心扩散法Plus版" class="headerlink" title="解法二： 中心扩散法Plus版"></a>解法二： 中心扩散法Plus版</h5><p>如果我们给整个字符串前后以及字符间隙都插入特殊字符 “#” （也可以是别的特殊字符，但是不能是字符串中存在的字符），这样奇数回文串判断方式不变，偶数间隙有字符”#”成了跟奇数回文串一样了。缺点就是牺牲了空间效率。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String dstStr = addBoundaries(s, <span class="string">'#'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dstStr.length(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> step = centerSpread(dstStr, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (step &gt; maxLength) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            maxLength = step;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//根据新串中的位置，和目标回文串的宽度计算原字符串中的起始位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            start = (i - maxLength) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLength);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">centerSpread</span><span class="params">(String src, <span class="keyword">int</span> center)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> length = src.length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> left = center - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> right = center + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; length &amp;&amp; src.charAt(left) == src.charAt(right)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        left--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        right++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        step++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> step;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">* 构造含有特殊字符的新字符串，长度是源字符串的 2n+1 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">addBoundaries</span><span class="params">(String src, <span class="keyword">char</span> divider)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (src == <span class="keyword">null</span> || src.length() == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (src.indexOf(divider) != -<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误，不可以传递已经存在的字符作为分隔符"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stringBuilder.append(divider);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : src.toCharArray()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        stringBuilder.append(ch).append(divider);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> stringBuilder.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>时间复杂度 O(n^2), 空间复杂度O(1)</p>
<p>代码比较简单，主要对比一下两种解法的区别，Plus版centerSpread()改进了传入参数，原来需要传入两个指针，现在只需要一个中心指针即可，另外返回的step实际上就是符合条件的回文串的长度，这里不直接返回字符串是因为带有特殊字符串，不如直接记录长度和中心位置，进一步计算出在源字符串中的起始和终点位置。</p>
<h5 id="解法三：-Manacher解法"><a href="#解法三：-Manacher解法" class="headerlink" title="解法三： Manacher解法"></a>解法三： Manacher解法</h5><p>更优解法：Manacher解法，时间复杂度只有O(n)，这里我还没考虑清楚，待补充！！！</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cxyxiaowu.com/2869.html" target="_blank" rel="noopener">LeetCode 第五题 最长回文子串</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/2020/03/11/sort-algorithm/</url>
    <content><![CDATA[<h3 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h3><p>已收录：冒泡排序、简单选择排序、简单插入排序、二路归并排序、简单快速排序</p>
<a id="more"></a>

<p>常用排序算法，要掌握的要点：</p>
<ul>
<li>实现思路</li>
<li>时间复杂度</li>
<li>最优时间复杂度，最差时间复杂度</li>
</ul>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是重复遍历元素，对元素进行两两比较，如果遇到顺序错误就进行调换，直到所有元素顺序都没有错误</p>
<blockquote>
<p>思路：</p>
<ol>
<li>相邻元素比较，比如第一个元素和第二个元素比较，大的元素移动到后面</li>
<li>继续比较每一对相邻元素，大的元素放后面，一直到最后一对元素比较完毕，最大的元素就到最后面了</li>
<li>重复上述步骤，再比较时不必比较上一次循环确定的最大元素也就是最后一个元素</li>
<li>重复1-3步骤，直到全部比较完毕</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arrays == <span class="keyword">null</span> || arrays.length &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays.length - <span class="number">1</span> - i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (arrays[j] &gt; arrays[j + <span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">int</span> temp = arrays[j + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                arrays[j + <span class="number">1</span>] = arrays[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                arrays[j] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>时间复杂度：O(n^2)</p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>简单选择排序也是重复遍历序列。开始未排序序列找到最小元素，放到起始排序位置，再从剩余未排序序列继续查找最小元素，放到已排序序列末尾</p>
<blockquote>
<p>思路：</p>
<ol>
<li>拿每一个跟后续所有元素比较，找到最小元素</li>
<li>最小元素和当前所在元素交换位置</li>
<li>重复1、2步骤直到所有元素都遍历了一遍</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arrays == <span class="keyword">null</span> || arrays.length &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> length = arrays.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> minIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        minIndex = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//这里使用i+1，因为每次遍历之后第一项肯定是最小的，否则会引入脏数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (arrays[j] &lt; arrays[minIndex]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                minIndex = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> temp = arrays[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        arrays[i] = arrays[minIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        arrays[minIndex] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>所用时间复杂度也是O(n^2)</p>
<h4 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h4><p>插入排序法，从最小子序列开始构建有序序列，每次从未排序序列往子序列加入一个元素，就对该元素进行排序。直到子序列和目标序列一样大</p>
<blockquote>
<p>思路：</p>
<ol>
<li>从第二个元素开始遍历数组，每一轮拿当前位置元素跟前面所有元素比较</li>
<li>比较过程中，比当前元素大的后移一位，直到遇到第一个比当前元素小的元素</li>
<li>将当前元素插入到小元素后面一位</li>
<li>重复1-3步骤直到全部遍历完毕</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> length = arrays.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> preIndex, currValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        preIndex = i - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        currValue = arrays[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arrays[preIndex] &gt; currValue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            arrays[preIndex + <span class="number">1</span>] = arrays[preIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            preIndex--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        arrays[preIndex + <span class="number">1</span>] = currValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>所用时间复杂度也是O(n^2)</p>
<h4 id="归并排序（二路归并排序）"><a href="#归并排序（二路归并排序）" class="headerlink" title="归并排序（二路归并排序）"></a>归并排序（二路归并排序）</h4><p>归并排序采用的是分治的思想，将已有序子序列合并，得到完全有序序列，因此需要先拿到有序子序列，让子序列在段间有序。常用的是二路归并排序。</p>
<p>实现思路：</p>
<blockquote>
<ol>
<li>将长度为n的序列拆分为两个长度为n/2的序列</li>
<li>对子序列进行1的操作，找到最小序列，开始向上归并</li>
<li>归并过程中对子序列进行排序，最终拿到两段有序子序列</li>
<li>最终两个子序列合并排序，形成完全有序序列</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arrays.length &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> n = arrays.length / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length - n];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.arraycopy(arrays,<span class="number">0</span>,left,<span class="number">0</span>,left.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.arraycopy(arrays,n,right,<span class="number">0</span>,right.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> mergeArrays(mergeSort(left), mergeSort(right));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 对左右数组进行合并排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] mergeArrays(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] mergeArrays = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mergeArrays.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (a &gt;= left.length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mergeArrays[i] = right[b];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            b++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;= right.length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mergeArrays[i] = left[a];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            a++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (left[a] &lt; right[b]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mergeArrays[i] = left[a];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mergeArrays[i] = right[b];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                b++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> mergeArrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>归并排序的时间复杂度分析：</p>
<ol>
<li>看mergeArrays函数，时间复杂度是O(n)</li>
<li>再看mergeSort函数，虽然使用了递归，但是核心是分治，也就是把n进行k次对半拆分，也就是 2^k = n,所以时间复杂度就是log n</li>
<li>综合1和2可以得到，函数整体时间复杂度是 O(log n)</li>
<li>因为无论序列中元素是否有序，都要进行分治，所以最好时间复杂度和最坏时间复杂度应该是一致的</li>
</ol>
<p>稳定性分析：<br>因为两个相同元素不会改变先后位置，所以是稳定的。</p>
<p>总结：</p>
<ul>
<li>平均时间复杂度 O(nlog n)</li>
<li>最好和最差时间复杂度都是 O(nlog n)</li>
<li>二路归并排序属于稳定排序</li>
</ul>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序：选定一个基准，经过一次排序将序列分为两个子序列，一部分比基准小，一部分比基准大。然后对子序列进行同样操作，最终实现序列有序。</p>
<p>实现思路：</p>
<ol>
<li>选定第一个元素作为基准元素，使用两个指针，分别指向第一个元素和最后一个元素</li>
<li>先用右边的指针与基准比较，直到遇见第一个比基准小的元素停止(先不考虑指针相遇)</li>
<li>再用左边元素与基准元素比较，直到遇见比基准大的元素停止(先不考虑相遇情况)</li>
<li>将左右元素此时指向的元素调换位置</li>
<li>继续重复2~4步骤，直到指针相遇。注意2、3步骤有可能出现没有符合条件直接相遇的情况。这两种相遇情况下，都把此时相遇为止元素 同基准元素调换位置</li>
<li>此时基准元素作为分割点，左边都是小元素序列，右边都是大元素序列。分别对左右序列(不包括基准元素)，递归执行1~5步骤，直到分割后左右指针相遇为止。</li>
</ol>
<p>上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> quickSort(arrays, <span class="number">0</span>, arrays.length - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arrays, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//标定基准，同时以基准对arrays left-right进行快速排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> partition = partition(arrays, left, right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//对基准左边数组进行快排</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(arrays, left, partition - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//对基准右边数组进行快排</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(arrays, partition + <span class="number">1</span>, right);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arrays, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> pivot = arrays[left];<span class="comment">//锚定基准点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> j = right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 从右侧开始检查，找到第一个小于基数的元素位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arrays[j] &gt;= pivot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//从左侧开始找，找到第一个大于基数的元素位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arrays[i] &lt;= pivot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//只有位置不同的时候再交换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (i != j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            swap(arrays, i, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//同一位置没必要交换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (left != i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        swap(arrays, left, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] swap(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp = array[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    array[i] = array[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    array[j] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>时间复杂度：</p>
<p>结论：最好时间复杂度是O(1),最差时间复杂度是O(n^2),平均时间复杂度是O(nlog n)<br>分析：</p>
<ul>
<li>n = 1 的时候，直接就返回了，O(1)</li>
<li>n &gt; 1<ul>
<li>假设每次序列都是恰好从中间分割，那n可以分2^k层，也就是log n，而每一层不管分多少子序列，加起来都是遍历n次。log n 层 n次遍历，可以得到平均时间复杂度O(nlog n)</li>
<li>最差的情况就是，每次基准点都是在序列一边，导致分了n层，每一层遍历n次，时间复杂度O(n^2)</li>
</ul>
</li>
</ul>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序（Heapsort）：利用堆数据结构设计的排序算法</p>
<p>tips：关于堆排序使用时仍然可以利用数组，但是要在脑海中构建出堆的数据结构模型。而构建的模型跟二叉树是一样的，所以可以借用二叉树的一些概念</p>
<p>实现堆排序必须知道的：</p>
<ul>
<li>确定堆中第一个非叶子节点：length/2 -1</li>
<li>针对每个非叶子节点，他的左右子节点都是 2i+1 和 2i+2</li>
<li>需要知道堆的两种模型：大顶堆和小顶堆<ul>
<li>大顶堆：每个节点都大于等于它的左右节点的堆</li>
<li>小顶堆：每个节点都小于等于它的左右孩子节点的堆</li>
</ul>
</li>
</ul>
<p>tips： 大顶堆一般用于构建升序序列，小顶堆用于构建降序序列。</p>
<p>了解了以上节点，可以来看一下实现思路</p>
<ol>
<li>首先需要从第一个非叶子节点开始遍历数组，从下到上，从右到左，构建大顶堆</li>
<li>此时大顶堆根节点就是最大元素，将他与最后一个叶子节点交换位置。</li>
<li>排除最后一个叶子节点，重新调整大顶堆</li>
<li>重复步骤2-3直到还剩一个元素为止。此时序列就已经是有序并且升序的了，</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> length = arrays.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//首先构建大顶堆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//找到第一个非叶子节点，下到上，右到左。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 可以自行画图找规律 length / 2 - 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        adjustHeap(arrays, i, length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//每次把堆顶元素与末尾元素交换，堆减少一个元素，直到遍历完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//交换堆顶元素,与末尾元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        swap(arrays, <span class="number">0</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//重新构建大顶堆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        adjustHeap(arrays, <span class="number">0</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 堆排序核心 - 调整 大顶堆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arrays, <span class="keyword">int</span> i, <span class="keyword">int</span> length)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp = arrays[i];<span class="comment">//临时存储 i 对应元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//每次选取指定节点的左节点进行比较</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span> * i + <span class="number">1</span>; k &lt; length; k = <span class="number">2</span> * k + <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//比较左右节点大小，右节点大选择右节点作为比较对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k + <span class="number">1</span> &lt; length &amp;&amp; arrays[k] &lt; arrays[k + <span class="number">1</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            k++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//比较和temp元素的大小, 若temp小则被换掉</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 因为每次比较的都是temp，k位置元素不用改变，最后再改变即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (arrays[k] &gt; temp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            arrays[i] = arrays[k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i = k;<span class="comment">//i直接用来存储每次交换后新的k的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//最终i的值确定以后把临时temp存进去，完成大顶堆的调整</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    arrays[i] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp = array[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    array[i] = array[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    array[j] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>关于时间复杂度：堆排序的时间复杂度三种情况都是O(nLog n)</p>
<ol>
<li>首先分析核心代码 adjustHeap 中的时间复杂度 2的m次方等于n，执行次数也就是 （log n） 次</li>
<li>然后分析heapSort 两个for循环实际上是 nLog n + nLog n<br>综上时间复杂度是 O(nLog n)</li>
</ol>
<h4 id="计数排序-amp-桶排序"><a href="#计数排序-amp-桶排序" class="headerlink" title="计数排序&amp;桶排序"></a>计数排序&amp;桶排序</h4><p>计数排序是一种特殊的桶排序，他们的思想是一致的，都是借助开辟新的内存空间进行排序</p>
<h5 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h5><p>先来看简单的计数排序实现思路</p>
<ol>
<li>遍历原数组，找出最大和最小元素，根据最大和最小元素创建 计数数组 bucketArray 容量，相当于min、min+1、min+2··· max 所有元素都有对应位置</li>
<li>遍历原数组，记录每一个元素出现次数，存入 bucketArray 中，这里有一个前提条件，在存入次数的时候实际上已经把顺序确定了</li>
<li>创建新的数组 dstArray，用于存放排序后的元素</li>
<li>此时如果把bucketArray中次数大于0的位置，找到srcArrays中对应的值，依次插入 dstArray n次就是有序序列了，下面转换成代码思路<ol>
<li>遍历 bucketArray 数组，重新计算每一项的值等于它的值加上前一项的值，这就意味着按照步骤3的思路，任意值在 dstArray 中的最大可能位置就确定了。</li>
<li>遍历原数组，根据 bucketArray[i]确定插入位置，之后 bucketArray[i]– , 下次重复数据就会插入到后一个位置</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (arrays == <span class="keyword">null</span> || arrays.length &lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> min = arrays[<span class="number">0</span>], max = arrays[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> srcLength = arrays.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//遍历找到最大值和最小值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> temp : arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        max = Math.max(temp, max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        min = Math.min(temp, min);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//构建计数数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> bucketLength = max - min + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] bucketArray = <span class="keyword">new</span> <span class="keyword">int</span>[bucketLength];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//再次遍历原数组，找出元素重复数量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> array : arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bucketArray[array - min]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//每一项与前一项叠加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bucketLength; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bucketArray[i] += bucketArray[i - <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//开始再次遍历原数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] dstArray = <span class="keyword">new</span> <span class="keyword">int</span>[srcLength];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = srcLength - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> target = arrays[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//计算得到当前元素之前又多少个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> bucketIndex = target - min;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index = bucketArray[bucketIndex] - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dstArray[index] = target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bucketArray[bucketIndex]--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> dstArray;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>计数排序的时间复杂度是O(n),但是他更适用于序列不大比较集中的情况。因为要开辟额外的存储空间，所以数据比较分散的时候就不适合了，会浪费空间</p>
<h5 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h5><p>桶排序也需要开辟新的存储空间，可以使用链表型数据结构来实现，java里更常用的是ArrayList</p>
<p>实现思路：</p>
<ol>
<li>找到序列最大最小值，将最大最小值之间的范围进行 n 等分，这个可以自行决定，一般来说n越大排序越快，但是消耗空间更多</li>
<li>遍历序列，计算应该插入桶中哪个位置</li>
<li>遍历桶，每一项中元素进行排序</li>
<li>将桶中所有子序列取出来，拼接起来就是有序序列</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> min = arrays[<span class="number">0</span>], max = arrays[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> srcLength = arrays.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//遍历找到最大值和最小值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> temp : arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        max = Math.max(temp, max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        min = Math.min(temp, min);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//也可以使用别的分组方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> bucketSize = (max - min) / srcLength + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//构建桶</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketSize; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bucketList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> array : arrays) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index = (array - min) / srcLength;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bucketList.get(index).add(array);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//对桶中元素进行排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (ArrayList&lt;Integer&gt; item : bucketList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!item.isEmpty())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//使用官方API，也可以根据需要使用别的排序法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Collections.sort(item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"bucket arrays: "</span> + bucketList.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>时间复杂度分析：</p>
<p>最好情况：O(n)，一般n分的越多时间复杂度越低，但是空间消耗越高</p>
<p>如果n设定合理，时间复杂度就取决于桶中子序列排序的时间复杂度了应该是 n * O(f(n))</p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3><p>由于理解不透彻暂不记录，但是标记以防以往。</p>
<ul>
<li>希尔排序</li>
<li>快速排序的多种思路</li>
<li>空间复杂度</li>
</ul>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ol>
<li><a href="https://www.cnblogs.com/onepixel/p/7674659.html" target="_blank" rel="noopener">十大经典排序算法（动图演示）</a></li>
<li><a href="https://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="noopener">图解排序算法-希尔排序</a></li>
<li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">图解排序算法-堆排序</a></li>
</ol>
<h4 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h4><ul>
<li>20200321 新增堆排序</li>
<li>20200314 新增快速排序</li>
<li>20200311 创建本文，新增冒泡排序、选择排序、插入排序、归并排序</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 合并数组</title>
    <url>/2020/03/04/leetcode-merge-array/</url>
    <content><![CDATA[<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><p>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。初始化 A 和 B 的元素数量分别为 m 和 n。示例如下:</p>
<blockquote>
<p>输入<br>A = [1,2,3,0,0,0], m = 3<br>B = [2,5,6],       n = 3<br>输出: [1,2,2,3,5,6]</p>
</blockquote>
<a id="more"></a>

<h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge01</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> m, <span class="keyword">int</span>[] B, <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.arraycopy(B, <span class="number">0</span>, A, <span class="number">0</span>, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> stepA = m - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> stepB = n - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> step = (m + n - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (step &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (stepB &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[step] = A[stepA];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                stepA--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                step--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (stepA &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[step] = B[stepB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                stepB--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                step--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (A[stepA] &gt; B[stepB]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[step] = A[stepA];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                stepA--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                A[step] = B[stepB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                stepB--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            step--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>解题思路</p>
<p>首先已知条件是 A数组有足够的剩余空间容纳B数组，所以一个很简单的思路就是直接把B数组加入到A数组进行快排，但是因为AB都是有序数组，快排会带来大量的冗余操作。所以考虑优化一下：<br>AB都是已经排序的数组，又已经AB初始化长度，那可以在插入的时候就开始进行比较。思路如下：</p>
<ol>
<li>根据m、n计算出AB合并后总长度 m+n</li>
<li>声明三个指针stepA、stepB、step，分别指向A、B末端，以及合并后A末端</li>
<li>这一步是关键，根据stepA或者stepB从AB中取出元素进行比较，谁的元素大就把该元素取出来放到step指向位置，同时取出元素的数组指针(stepA 或者 stepB)前移一位,另一个指针不变，step也需要在元素插入后前移一位。</li>
<li>重复步骤三直到stepA小于0或者stepB小于零，那就把没有取完的数组剩余元素都插入step循环到0为止指向的位置。当step也小于0的时候跳出循环，就完成了AB数组的合并</li>
</ol>
<p>PS：</p>
<ol>
<li>这里需要考虑边界条件，A或者B为空的时候，以及while循环的跳出条件。</li>
<li>因为m+n 提供了足够的长度，因此在比较过程中不必担心从A或者B中取出来的元素在插入的过程中会覆盖A中未用到的元素。</li>
</ol>
<p>时间复杂度是O(n)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 反转链表</title>
    <url>/2020/03/02/leetcode-206-reverse-list/</url>
    <content><![CDATA[<h3 id="反转一个链表"><a href="#反转一个链表" class="headerlink" title="反转一个链表"></a>反转一个链表</h3><blockquote>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
</blockquote>
<p>进阶： 迭代|递归反转链表 </p>
<a id="more"></a>

<p>前置条件：链表数据结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前置条件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        val = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="解法一：暴力解法"><a href="#解法一：暴力解法" class="headerlink" title="解法一：暴力解法"></a>解法一：暴力解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode node = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode temp = head.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head.next = node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        node = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>解题思路：</p>
<p>链表反转思路就是反转每一个节点的指针就可以了，以此为思路步骤如下：</p>
<ol>
<li>声明一个新的链表用于装载反转后的链表，即目标链表</li>
<li>循环遍历原链表<ol>
<li>每次从原链表取出一个元素，将该元素指向目标链表，成为目标链表新的头部节点</li>
<li>原链表指向下一个节点，也就是少了一个元素</li>
<li>重复循环1和2步骤直到原链表为null,跳出循环</li>
</ol>
</li>
<li>此时目标链表就实现了对原链表的反转</li>
</ol>
<p>该方法时间复杂度是：O(n) </p>
<h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><p>考虑思路是递归，但是还没想到，待补充！！！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
</search>
